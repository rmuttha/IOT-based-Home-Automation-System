//////////////////////////////////////////////////////////////////////////////////////////
//
// 	@file			mpu6050.c
//	@Author			Rutuja Muttha & Raksha Mairpady
//
//	@Date			27th February 2024
//	@Email 			rmuttha@pdx.edu & raksham@pdx.edu
//
//	@Brief			Contains the MPU6050 sensor's functions definition.
//
//	@rev	1.0		- Added definitions and created a file for initialization
//					- Included a simple gyro arrangement and recorded X axis data
//
//  @rev	1.1		- Added changes to getGyroData function for proper functioning
//
/////////////////////////////////////////////////////////////////////////////////////////

#include "mpu6050.h"
#include  "xiic.h"
#include "xgpio.h"


/**
 * @brief Initializes the MPU6050 sensor.
 *
 * @param IICInst Pointer to the I2C instance used for communication.
 */
 void mpu6050_init(XIic* IICInst)
 {
 	u8 oBuf[2];
 	u8 iBuf = 0x00;

	// Read WHO_AM_I register to verify communication with the sensor
 	oBuf[0] = 0x75;
 	oBuf[1] = 0x00;
 	XIic_Send(IIC_BADDR, 0x68, oBuf, 1, XIIC_REPEATED_START);
 	XIic_Recv(IIC_BADDR, 0x68, &iBuf, 1, XIIC_STOP);
 	xil_printf("WHO_AM_I is 0x%x\n\r", iBuf);

 	 // Read Power Management 1 register to check current settings
 	oBuf[0] = PWR_MGMT_1;
 	XIic_Send(IIC_BADDR, 0x68, oBuf, 1, XIIC_REPEATED_START);
 	XIic_Recv(IIC_BADDR, 0x68, &iBuf, 1, XIIC_STOP);
 	xil_printf("Power Management 1 is 0x%x\n\r", iBuf);

 	// Configure Power Management 1 register to wake up sensor
 	oBuf[0] = PWR_MGMT_1;
 	oBuf[1] = 0x00;
 	XIic_Send(IIC_BADDR, 0x68, oBuf, 2, XIIC_STOP);

 	// Read back Power Management 1 register to verify configuration
 	oBuf[0] = PWR_MGMT_1;
 	oBuf[1] = 0x00;
 	XIic_Send(IIC_BADDR, 0x68, oBuf, 1, XIIC_REPEATED_START);
 	XIic_Recv(IIC_BADDR, 0x68, &iBuf, 1, XIIC_STOP);
 	xil_printf("Power value is 0x%x\n\r", iBuf);


 }
 void gettempData(XIic* IICInst){

 	 u8 buffer[2];
 	     int16_t temperature;
 	     u8 oBuf;
 	     oBuf = TEMP_OUT_H;

 	     // Read temperature data from the sensor
 	     XIic_Send(IIC_BADDR, 0x68, &oBuf, 1, XIIC_REPEATED_START);
 	     XIic_Recv(IIC_BADDR, 0x68, buffer, 2, XIIC_STOP);

 	     // Combine high and low bytes to form 16-bit signed integer
 	     temperature = ((buffer[0] << 8) | buffer[1]);

 	     xil_printf("temperature is: %d\n\r", temperature);

 	     int16_t final_data_out = temperature / 340.0 + 36.53;
 	    final_data_out -= 4;
 	    int16_t int_part = (int16_t)final_data_out;
 	    int16_t decimal_part = (int16_t)((final_data_out - int_part) * 1000); // Extract three decimal digits

 	        // Make the decimal part positive if it's negative
 	        if (decimal_part < 0) {
 	            decimal_part = -decimal_part; // Make it positive
 	            int_part--; // Increment the integer part to compensate for making the decimal part positive
 	        }

 	     xil_printf("final data of temp is: %d.%2d\n\r", int_part, decimal_part);
 	    if (int_part > 22) {
 	    	          	            // Send specific value to STEPPER_ONE GPIO
 	    XGpio_DiscreteWrite(&STEPPER_ONE, 1, 0xF);
 	    } else {
 	    	       // Send another value to STEPPER_ONE GPIO
 	   XGpio_DiscreteWrite(&STEPPER_ONE, 1, 0x00);
 	    }

  }

