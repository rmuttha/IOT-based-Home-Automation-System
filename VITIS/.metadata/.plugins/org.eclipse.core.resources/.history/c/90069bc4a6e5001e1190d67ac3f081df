#include <stdbool.h>
#include  "xparameters.h"
#include  "xstatus.h"
#include "xgpio.h"
#include "GPIO_ALL.h"

#include  "xil_printf.h"


#include  "xiic.h"
#include  "nexys4IO.h"
#include  "xuartlite_l.h"
#include  "xuartlite.h"

#include "microblaze_sleep.h"



#define DELAY 50000
#define CW 1  // Clockwise
#define CCW 0

XGpio FAN_OUT_ONE,FAN_OUT_SECOND,FAN_OUT_THIRD,FAN_OUT_FOURTH,FAN_OUT_FIFTH,FAN_OUT_TEMP,STEPPER_ONE,STEPPER_TWO,STEPPER_THREE,STEPPER_FOUR,STEPPER_FIVE; 
u32 data;



void gpioinit(XGpio* FAN_OUT_ONE,XGpio* FAN_OUT_SECOND,XGpio* FAN_OUT_THIRD,XGpio* FAN_OUT_FOURTH,XGpio* FAN_OUT_FIFTH,XGpio* FAN_OUT_TEMP,
			  XGpio* STEPPER_ONE,XGpio* STEPPER_TWO,XGpio* STEPPER_THREE,XGpio* STEPPER_FOUR,XGpio* STEPPER_FIVE)
		{
			int Status;

		// Initialize FAN_OUT_ONE GPIO instance and check status
			Status = XGpio_Initialize(&FAN_OUT_ONE, XPAR_GPIO_1_DEVICE_ID);
		if (Status != XST_SUCCESS) { 
			xil_printf("ERROR: FAN_OUT_ONE GPIO Initialization failed with status %d\r\n", Status);
			return XST_FAILURE;
	        }
	        xil_printf("FAN_OUT_ONE GPIO initialized successfully and base address is %x\r\n", FAN_OUT_ONE.BaseAddress);
			
			
			// Initialize FAN_OUT_SECOND GPIO instance and check status
			Status = XGpio_Initialize(&FAN_OUT_SECOND, XPAR_GPIO_0_DEVICE_ID);
		if (Status != XST_SUCCESS) { 
			xil_printf("ERROR: FAN_OUT_SECOND GPIO Initialization failed with status %d\r\n", Status);
			return XST_FAILURE;
	        }
	        xil_printf("FAN_OUT_SECOND GPIO initialized successfully and base address is %x\r\n", FAN_OUT_SECOND.BaseAddress);
			
			
			
			// Initialize FAN_OUT_THIRD GPIO instance and check status
			Status = XGpio_Initialize(&FAN_OUT_THIRD, XPAR_GPIO_7_DEVICE_ID);
		if (Status != XST_SUCCESS) { 
			xil_printf("ERROR: FAN_OUT_THIRD GPIO Initialization failed with status %d\r\n", Status);
			return XST_FAILURE;
	        }
	        xil_printf("FAN_OUT_THIRD GPIO initialized successfully and base address is %x\r\n", FAN_OUT_THIRD.BaseAddress);
			
			
			
			// Initialize FAN_OUT_FOURTH GPIO instance and check status
			Status = XGpio_Initialize(&FAN_OUT_FOURTH, XPAR_GPIO_8_DEVICE_ID);
		if (Status != XST_SUCCESS) { 
			xil_printf("ERROR: FAN_OUT_FOURTH GPIO Initialization failed with status %d\r\n", Status);
			return XST_FAILURE;
	        }
	        xil_printf("FAN_OUT_FOURTH GPIO initialized successfully and base address is %x\r\n", FAN_OUT_FOURTH.BaseAddress);
			
			
			// Initialize FAN_OUT_FIFTH GPIO instance and check status
			Status = XGpio_Initialize(&FAN_OUT_FIFTH, XPAR_GPIO_9_DEVICE_ID);
		if (Status != XST_SUCCESS) { 
			xil_printf("ERROR: FAN_OUT_FIFTH GPIO Initialization failed with status %d\r\n", Status);
			return XST_FAILURE;
	        }
	        xil_printf("FAN_OUT_FIFTH GPIO initialized successfully and base address is %x\r\n", FAN_OUT_FIFTH.BaseAddress);
			
			
			// Initialize FAN_OUT_TEMP GPIO instance and check status
			Status = XGpio_Initialize(&FAN_OUT_TEMP, XPAR_GPIO_10_DEVICE_ID);
		if (Status != XST_SUCCESS) { 
			xil_printf("ERROR: FAN_OUT_TEMP GPIO Initialization failed with status %d\r\n", Status);
			return XST_FAILURE;
	        }
	        xil_printf("FAN_OUT_TEMP GPIO initialized successfully and base address is %x\r\n", FAN_OUT_TEMP.BaseAddress);
			
			
			// Initialize STEPPER_ONE GPIO instance and check status
			Status = XGpio_Initialize(&STEPPER_ONE, XPAR_GPIO_2_DEVICE_ID);
		if (Status != XST_SUCCESS) { 
			xil_printf("ERROR: STEPPER_ONE GPIO Initialization failed with status %d\r\n", Status);
			return XST_FAILURE;
	        }
	        xil_printf("STEPPER_ONE GPIO initialized successfully and base address is %x\r\n", STEPPER_ONE.BaseAddress);
			
			
			// Initialize STEPPER_TWO GPIO instance and check status
			Status = XGpio_Initialize(&STEPPER_TWO, XPAR_GPIO_3_DEVICE_ID);
		if (Status != XST_SUCCESS) { 
			xil_printf("ERROR: STEPPER_TWO GPIO Initialization failed with status %d\r\n", Status);
			return XST_FAILURE;
	        }
	        xil_printf("STEPPER_TWO GPIO initialized successfully and base address is %x\r\n", STEPPER_TWO.BaseAddress);
			
			
			// Initialize STEPPER_THREE GPIO instance and check status
			Status = XGpio_Initialize(&STEPPER_THREE, XPAR_GPIO_4_DEVICE_ID);
		if (Status != XST_SUCCESS) { 
			xil_printf("ERROR: STEPPER_THREE GPIO Initialization failed with status %d\r\n", Status);
			return XST_FAILURE;
	        }
	        xil_printf("STEPPER_THREE GPIO initialized successfully and base address is %x\r\n", STEPPER_THREE.BaseAddress);
			
			
			
			// Initialize STEPPER_FOUR GPIO instance and check status
			Status = XGpio_Initialize(&STEPPER_FOUR, XPAR_GPIO_5_DEVICE_ID);
		if (Status != XST_SUCCESS) { 
			xil_printf("ERROR: STEPPER_FOUR GPIO Initialization failed with status %d\r\n", Status);
			return XST_FAILURE;
	        }
	        xil_printf("STEPPER_FOUR GPIO initialized successfully and base address is %x\r\n", STEPPER_FOUR.BaseAddress);
			
			
			// Initialize STEPPER_FIVE GPIO instance and check status
			Status = XGpio_Initialize(&STEPPER_FIVE, XPAR_GPIO_5_DEVICE_ID);
		if (Status != XST_SUCCESS) { 
			xil_printf("ERROR: STEPPER_FIVE GPIO Initialization failed with status %d\r\n", Status);
			return XST_FAILURE;
	        }
	        xil_printf("STEPPER_FIVE GPIO initialized successfully and base address is %x\r\n", STEPPER_FIVE.BaseAddress);
				
	}



		void setting_direction(XGpio* FAN_OUT_ONE,XGpio* FAN_OUT_SECOND,XGpio* FAN_OUT_THIRD,XGpio* FAN_OUT_FOURTH,XGpio* FAN_OUT_FIFTH,XGpio* FAN_OUT_TEMP,
							   XGpio* STEPPER_ONE,XGpio* STEPPER_TWO,XGpio* STEPPER_THREE,XGpio* STEPPER_FOUR,XGpio* STEPPER_FIVE)
		{
			// Setting the direction GPIO to output 
			XGpio_SetDataDirection(&FAN_OUT_ONE, 1, 0x00);
			
	        XGpio_SetDataDirection(&FAN_OUT_SECOND, 1, 0x00);
			
			XGpio_SetDataDirection(&FAN_OUT_THIRD, 1, 0x00);
			
	        XGpio_SetDataDirection(&FAN_OUT_FOURTH, 1, 0x00);
			
			XGpio_SetDataDirection(&FAN_OUT_FIFTH, 1, 0x00);
			
	        XGpio_SetDataDirection(&FAN_OUT_TEMP, 1, 0x00);
			
			
			
			// Setting the direction GPIO to input		
			
			XGpio_SetDataDirection(&STEPPER_ONE, 1, 0xFFFFFFFF);
			
	        XGpio_SetDataDirection(&STEPPER_TWO, 1, 0xFFFFFFFF);
			
			XGpio_SetDataDirection(&STEPPER_THREE, 1, 0xFFFFFFFF);
			
	        XGpio_SetDataDirection(&STEPPER_FOUR, 1, 0xFFFFFFFF);
			
			XGpio_SetDataDirection(&STEPPER_FIVE, 1, 0xFFFFFFFF);
			
	}
			
			
		void check_status_of_motors(XGpio* FAN_OUT_ONE,XGpio* FAN_OUT_SECOND,XGpio* FAN_OUT_THIRD,XGpio* FAN_OUT_FOURTH,XGpio* FAN_OUT_FIFTH,XGpio* FAN_OUT_TEMP,
							   XGpio* STEPPER_ONE,XGpio* STEPPER_TWO,XGpio* STEPPER_THREE,XGpio* STEPPER_FOUR,XGpio* STEPPER_FIVE)
				
				{
					 static bool motor_running[5] = {false}; // Array to track the status of each motor
                     static bool rotate_once[5] = {false}; // Array to track if each motor should rotate once
					 
				
			while (1) {
				// Check status of STEPPER_ONE
				u32 data_stepper_one = XGpio_DiscreteRead(&STEPPER_ONE, 1);
				if (data_stepper_one == 14 && !rotate_once[0]) {
					
					rotate_once[0] = true;
				motor_running[0] = true;
					
					// Implement motor code for STEPPER_ONE clockwise rotation
					xil_printf("Motor STEPPER_ONE started (Clockwise)\r\n");
					
				} else if (data_stepper_one == 15 && !rotate_once[0]) {
					
					rotate_once[0] = true;
				motor_running[0] = true;
					// Implement motor code for STEPPER_ONE counterclockwise rotation
					xil_printf("Motor STEPPER_ONE started (Counterclockwise)\r\n");
					
				} else if (data_stepper_one != 14 && data_stepper_one != 15) {
					
				// Reset rotation flag and stop motor if invalid data is received
				rotate_once[0] = false;
				motor_running[0] = false;
				// Stop motor output
				XGpio_DiscreteWrite(&FAN_OUT_ONE, 1, 0);
				xil_printf("Invalid data received for STEPPER_ONE. Motor in off state.\r\n");
				}
				

            // Check status of STEPPER_TWO (similar logic as above)
			u32 data_stepper_two = XGpio_DiscreteRead(&STEPPER_TWO, 1);
			if (data_stepper_two == 14 && !rotate_once[1]) {
				
				rotate_once[1] = true;
				motor_running[1] = true;
				// Implement motor code for STEPPER_TWO clockwise rotation
				xil_printf("Motor STEPPER_TWO started (Clockwise)\r\n");
				
			} else if (data_stepper_two == 15 && !rotate_once[1]) {
				
				rotate_once[1] = true;
				motor_running[1] = true;
				// Implement motor code for STEPPER_TWO counterclockwise rotation
				xil_printf("Motor STEPPER_TWO started (Counterclockwise)\r\n");
				
			} else if (data_stepper_two != 14 && data_stepper_two != 15) {
				
				// Reset rotation flag and stop motor if invalid data is received
				rotate_once[1] = false;
				motor_running[1] = false;
				// Stop motor output
				XGpio_DiscreteWrite(&FAN_OUT_SECOND, 1, 0);
				xil_printf("Invalid data received for STEPPER_TWO. Motor in off state.\r\n");
				
			}

        //  Check status of STEPPER_THREE (similar logic as above)
		u32 data_stepper_three = XGpio_DiscreteRead(&STEPPER_THREE, 1);
			if (data_stepper_three == 14 && !rotate_once[2]) {
				
				rotate_once[2] = true;
				motor_running[2] = true;
				// Implement motor code for STEPPER_THREE clockwise rotation
				xil_printf("Motor STEPPER_THREE started (Clockwise)\r\n");
				
			} else if (data_stepper_three == 15 && !rotate_once[2]) {
				
				rotate_once[2] = true;
				motor_running[2] = true;
				// Implement motor code for STEPPER_THREE counterclockwise rotation
				xil_printf("Motor STEPPER_THREE started (Counterclockwise)\r\n");
				
			} else if (data_stepper_three != 14 && data_stepper_three != 15) {
				
				// Reset rotation flag and stop motor if invalid data is received
				rotate_once[2] = false;
				motor_running[2] = false;
				// Stop motor output
				XGpio_DiscreteWrite(&FAN_OUT_THIRD, 1, 0);
				xil_printf("Invalid data received for STEPPER_THREE. Motor stopped.\r\n");
			}
			
			 //  Check status of STEPPER_FOUR (similar logic as above)
		    u32 data_stepper_four = XGpio_DiscreteRead(&STEPPER_FOUR, 1);
			if (data_stepper_four == 14 && !rotate_once[1]) {
				
				rotate_once[3] = true;
				motor_running[3] = true;
				// Implement motor code for STEPPER_FOUR clockwise rotation
				xil_printf("Motor STEPPER_FOUR started (Clockwise)\r\n");
				
			} else if (data_stepper_four == 15 && !rotate_once[3]) {
				
				rotate_once[3] = true;
				motor_running[3] = true;
				// Implement motor code for STEPPER_FOUR counterclockwise rotation
				xil_printf("Motor STEPPER_FOUR started (Counterclockwise)\r\n");
				
			} else if (data_stepper_four != 14 && data_stepper_four != 15) {
				
				// Reset rotation flag and stop motor if invalid data is received
				rotate_once[3] = false;
				motor_running[3] = false;
				// Stop motor output
				XGpio_DiscreteWrite(&FAN_OUT_FOURTH, 1, 0);
				xil_printf("Invalid data received for STEPPER_FOUR. Motor stopped.\r\n");
			}
			
			 //  Check status of STEPPER_FIVE (similar logic as above)
		    u32 data_stepper_five = XGpio_DiscreteRead(&STEPPER_FIVE, 1);
			if (data_stepper_five == 14 && !rotate_once[1]) {
				
				rotate_once[4] = true;
				motor_running[4] = true;
				// Implement motor code for STEPPER_FIVE clockwise rotation
				xil_printf("Motor STEPPER_FIVE started (Clockwise)\r\n");
				
			} else if (data_stepper_five == 15 && !rotate_once[3]) {
				
				rotate_once[4] = true;
				motor_running[4] = true;
				// Implement motor code for STEPPER_FIVE counterclockwise rotation
				xil_printf("Motor STEPPER_FIVE started (Counterclockwise)\r\n");
				
			} else if (data_stepper_five != 14 && data_stepper_five != 15) {
				
				// Reset rotation flag and stop motor if invalid data is received
				rotate_once[4] = false;
				motor_running[4] = false;
				// Stop motor output
				XGpio_DiscreteWrite(&FAN_OUT_FIFTH, 1, 0);
				xil_printf("Invalid data received for STEPPER_FIVE. Motor stopped.\r\n");
			}
			
		// Motor control loop for STEPPER_ONE
        if (motor_running[0]) {
            // Implement motor control code (e.g., stepping)
            // This is just a placeholder
            xil_printf("Motor STEPPER_ONE running...\r\n");
            delay(DELAY); // Adjust delay as necessary

            // After completing a full revolution, stop the motor
            static int step_stepper_one = 0;
            if (step_stepper_one >= stepsPerRevolution) {
                motor_running[0] = false;
                rotate_once[0] = false;
                // Stop motor output
                XGpio_DiscreteWrite(&FAN_OUT_ONE, 1, 0);
                xil_printf("Motor STEPPER_ONE stopped\r\n");
            }

            step_stepper_one++; // Increment step count for STEPPER_ONE
        }

		// Motor control loop for STEPPER_TWO
		
        if (motor_running[1]) {
            // Implement motor control code (e.g., stepping)
            // This is just a placeholder
            xil_printf("Motor STEPPER_TWO running...\r\n");
            delay(DELAY); // Adjust delay as necessary

            // After completing a full revolution, stop the motor
            static int step_stepper_two = 0;
            if (step_stepper_two >= stepsPerRevolution) {
                motor_running[1] = false;
                rotate_once[1] = false;
                // Stop motor output
                XGpio_DiscreteWrite(&FAN_OUT_TWO, 1, 0);
                xil_printf("Motor STEPPER_TWO stopped\r\n");
            }

            step_stepper_one++; // Increment step count for STEPPER_TWO
        }
			
			
			// Motor control loop for STEPPER_THREE
        if (motor_running[2]) {
            // Implement motor control code (e.g., stepping)
            // This is just a placeholder
            xil_printf("Motor STEPPER_Three running...\r\n");
            delay(DELAY); // Adjust delay as necessary

            // After completing a full revolution, stop the motor
            static int step_stepper_three = 0;
            if (step_stepper_three >= stepsPerRevolution) {
                motor_running[2] = false;
                rotate_once[2] = false;
                // Stop motor output
                XGpio_DiscreteWrite(&FAN_OUT_THIRD, 1, 0);
                xil_printf("Motor STEPPER_THREE stopped\r\n");
            }

            step_stepper_one++; // Increment step count for STEPPER_THREE
        }
		
		
		// Motor control loop for STEPPER_FOUR
        if (motor_running[3]) {
            // Implement motor control code (e.g., stepping)
            // This is just a placeholder
            xil_printf("Motor STEPPER_FOUR running...\r\n");
            delay(DELAY); // Adjust delay as necessary

            // After completing a full revolution, stop the motor
            static int step_stepper_four = 0;
            if (step_stepper_four >= stepsPerRevolution) {
                motor_running[3] = false;
                rotate_once[3] = false;
                // Stop motor output
                XGpio_DiscreteWrite(&FAN_OUT_FOURTH, 1, 0);
                xil_printf("Motor STEPPER_FOUR stopped\r\n");
            }

            step_stepper_one++; // Increment step count for STEPPER_FOUR
        }
		
		
		// Motor control loop for STEPPER_FOUR
        if (motor_running[4]) {
            // Implement motor control code (e.g., stepping)
            // This is just a placeholder
            xil_printf("Motor STEPPER_FIVE running...\r\n");
            delay(DELAY); // Adjust delay as necessary

            // After completing a full revolution, stop the motor
            static int step_stepper_five = 0;
            if (step_stepper_five >= stepsPerRevolution) {
                motor_running[4] = false;
                rotate_once[4] = false;
                // Stop motor output
                XGpio_DiscreteWrite(&FAN_OUT_FIFTH, 1, 0);
                xil_printf("Motor STEPPER_FIVE stopped\r\n");
            }

            step_stepper_one++; // Increment step count for STEPPER_FIVE
        }
		
			
			
			
    }
}

